/*
 * AdvSHA3 kernel implementation.
 *
 * @author  mkimid
 */

#ifndef ADVSHA3_CL
#define ADVSHA3_CL

#define SPH_LITTLE_ENDIAN 1

#define SPH_UPTRs                         sph_u64

typedef uint                              sph_u32;
typedef int                               sph_s32;

typedef ulong                             sph_u64;
typedef long                              sph_s64;


#define SPH_64                            1
#define SPH_64_TRUE                       1

#define SPH_C32(x)                        ((sph_u32)(x ## U))
#define SPH_T32(x)                        ((x) & SPH_C32(0xFFFFFFFF))
#define SPH_ROTL32(x, n)                  rotate(x, n)

#define SPH_ROTR32(x, n)                  SPH_ROTL32(x, (32 - (n)))

#define SPH_C64(x)                        ((sph_u64)(x ## UL))
#define SPH_T64(x)                        ((x) & SPH_C64(0xFFFFFFFFFFFFFFFF))
#define SPH_ROTL64(x, n)                  rotate(x, (ulong)(n))

#define SPH_ROTR64(x, n)                  SPH_ROTL64(x, (64 - (n)))

#define SWAP4(x)                          as_uint(as_uchar4(x).wzyx)
#define SWAP8(x)                          as_ulong(as_uchar8(x).s76543210)

#define DEC64E(x)                         SWAP8(x)
#define DEC64BE(x)                        SWAP8(*(const __global sph_u64 *) (x));


#include "__blake.cl"
#include "__groestl.cl"
#include "__jh.cl"
#include "__keccak.cl"
#include "__skein.cl"


__attribute__((reqd_work_group_size(WORKSIZE, 1, 1)))
__kernel void search(__global uint * input, volatile __global uint * output, const ulong target) {

	__local ulong LT0[256], LT1[256], LT2[256], LT3[256], LT4[256], LT5[256], LT6[256], LT7[256];
    uint init = get_local_id(0);
    uint step = get_local_size(0);
    for (uint i = init; i < 256; i += step) {
        LT0[i] = T0[i];
        LT1[i] = T1[i];
        LT2[i] = T2[i];
        LT3[i] = T3[i];
        LT4[i] = T4[i];
        LT5[i] = T5[i];
        LT6[i] = T6[i];
        LT7[i] = T7[i];
    }
    barrier(CLK_LOCAL_MEM_FENCE);

    uint  gid = get_global_id(0);
		uint  INPUT[32];
    union {
      uint  U4[32];
      ulong U8[16];
    } HASH;
		
		for (uint i = 0; i < 20; i++) INPUT[i] = input[i];
	  INPUT[19] = gid;
		
		uchar data[] =
{0x70,0x00,0x00,0x00,0x79,0xd3,0x5c,0x7f,0x31,0x54,0x54,0xfc,0xa3,0x85,0x79,0x41,
 0xcd,0xa2,0x8c,0x7c,0x51,0x70,0xc0,0x6c,0x34,0xd4,0x8b,0x36,0x9a,0x81,0xfd,0x9b,
 0x00,0x00,0x00,0x00,0xb0,0xc2,0x15,0x1b,0xbf,0xe5,0xda,0xf4,0xa6,0xe8,0xcb,0x1d,
 0x9e,0x8e,0x1c,0x68,0x6f,0xea,0xe5,0xda,0x89,0xe5,0xa9,0xb5,0xfd,0x21,0x91,0x2f,
 0xfc,0x1d,0x9f,0x8d,0x1c,0x3f,0x33,0x53,0x8f,0x71,0x01,0x1d,0x00,0x00,0x00,0x00,
 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x80 };
    uchar * ptr = (uchar *)(&HASH.U8[0]);
    __global uchar * out = (__global uchar *)(output);
    for (uint i = 0; i < 128; i++) ptr[i] = data[i];
 	  for (uint i = 0; i <  64; i++) out[i] = ptr[i];
	
		KECCAK512(HASH.U8);
		
		ptr = (uchar *)(&HASH.U8[0]);
	  for (uint i = 0; i < 64; i++) out[i+64] = ptr[i];
	
		for (uint i = 0; i < 8; i++) {
			  switch (HASH.U4[0x00] & 0x03) {
			    case 0x00:
							 BLAKE512(HASH.U8);
					     break;
				  case 0x01:
               GROESTL512(HASH.U8, LT0, LT1, LT2, LT3, LT4, LT5, LT6, LT7);
					     break;
				  case 0x02:
               JH512(HASH.U8);
					     break;
				  case 0x03:
               SKEIN512(HASH.U8);
					     break;
				}
				
				for (uint j = 0; j < 64; j++) out[i * 64 + 128 + j] = ptr[j];
				out[i * 64 + 128 + 63] = (uchar)(HASH.U4[0x00] & 0x03);
		}
		
		if ((get_global_id(0) & 0xFFFF) == 0) output[0xFF] = 1;
/*			
    if (SWAP8(HASH[3]) <= target) {
       output[output[0xFF]++] = gid;
		}
*/		
}

#endif // ADVSHA3_CL
